{"version":3,"file":"static/js/324.8d8da73e.chunk.js","mappings":"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","sources":["Network/ActiveApi.js","Pages/SubPay/ManualPay.js","Pages/SubPay/Purchase.js","Pages/SubPay/WebPay.js"],"sourcesContent":["import swal from \"sweetalert\";\r\nimport { addActive, fetchActives, updateActive } from \"../reducers/ActiveSlice\";\r\nimport { ApiUrl } from \"./Urls\";\r\n\r\nexport const FetchActives = async (\r\n  softwareId,\r\n  token,\r\n  dispatch,\r\n  lastonline,\r\n  from = \"fetch\",\r\n  payload = {}\r\n) => {\r\n  if (from === \"fetch\") {\r\n    FetchLiveActives(token, softwareId, lastonline, dispatch);\r\n  } else if (parseInt(softwareId) === parseInt(payload.softwareId)) {\r\n    dispatch(updateActive(payload));\r\n  }\r\n};\r\n\r\nexport const addLiveActive = (active, softwareId, token, dispatch) => {\r\n  return fetch(`${ApiUrl}/activation/add`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      ...active,\r\n      softwareId,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 201) {\r\n        dispatch(updateActive(res.active));\r\n        swal({\r\n          title: \"Success, Activation will be reviewed within 12 hrs\",\r\n          text: \"You can come here and check progress\",\r\n          icon: \"success\",\r\n        });\r\n      } else if (res.status === 403) {\r\n        swal({\r\n          title: \"Spam noticed\",\r\n          text: \"Retry after one month\",\r\n          icon: \"error\",\r\n        });\r\n      } else {\r\n        swal({\r\n          title: \"Failed to connect\",\r\n          icon: \"warning\",\r\n          timer: 3000,\r\n        });\r\n      }\r\n    })\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Failed to connect\",\r\n        icon: \"warning\",\r\n        timer: 3000,\r\n      });\r\n    });\r\n};\r\n\r\nexport const updateLiveActive = (active, token, dispatch) => {\r\n  return fetch(`${ApiUrl}/activation/edit`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      ...active,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(updateActive(res.active));\r\n      } else {\r\n        swal({\r\n          title: \"Failed to connect\",\r\n          icon: \"warning\",\r\n          timer: 3000,\r\n        });\r\n      }\r\n    })\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Failed to connect\",\r\n        icon: \"warning\",\r\n        timer: 3000,\r\n      });\r\n    });\r\n};\r\n\r\nexport const FetchLiveActives = (token, softwareId, online, dispatch) => {\r\n  fetch(`${ApiUrl}/activation/get`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      online,\r\n      softwareId,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(fetchActives(res.actives));\r\n      }\r\n    })\r\n    .catch(() => {});\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FetchLiveActives, addLiveActive } from \"../../Network/ActiveApi\";\r\n\r\nconst ManualPay = ({ softwareId }) => {\r\n  //redux dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const [TransactionCode, setTransactionCode] = useState(\"\");\r\n  const [ConfirmCode, setConfirmCode] = useState(\"\");\r\n  const [Loading, setLoading] = useState(false);\r\n  const Actives = useSelector((state) => state.active.actives);\r\n\r\n  useEffect(() => {\r\n    FetchLiveActives(\"\", softwareId, 0, dispatch);\r\n  }, []);\r\n\r\n  const UploadCode = async () => {\r\n    setLoading(true);\r\n    await addLiveActive(\r\n      { transaction: TransactionCode },\r\n      softwareId,\r\n      \"\",\r\n      dispatch\r\n    );\r\n    setLoading(false);\r\n    setTransactionCode(\"\");\r\n    setConfirmCode(\"\");\r\n  };\r\n\r\n  const SaveCode = (e) => {\r\n    e.preventDefault();\r\n    if (TransactionCode == \"\" || TransactionCode != ConfirmCode) {\r\n      return;\r\n    }\r\n    swal({\r\n      title: `Warning!, To avoid spammers we only allow activation code request per institution once in a month.`,\r\n      text: `Please confirm the payment transaction code and then continue ${TransactionCode}`,\r\n      icon: \"warning\",\r\n      buttons: true,\r\n    })\r\n      .then((willReturn) => {\r\n        if (willReturn) {\r\n          UploadCode();\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  return (\r\n    <div className=\"card my-2\">\r\n      {Actives.length > 0 ? (\r\n        <table className=\"table table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Transaction Code</th>\r\n              <th>Status</th>\r\n              <th>Activation Code</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Actives.map((active) => (\r\n              <tr key={active.linker}>\r\n                <td>{active.transaction}</td>\r\n\r\n                <td>\r\n                  {active.deleted != 0 ? (\r\n                    <span className=\"text-danger\">Deleted</span>\r\n                  ) : active.status == 0 ? (\r\n                    <span className=\"text-info\">In Review</span>\r\n                  ) : active.status == 2 ? (\r\n                    <span className=\"text-danger\">Rejected</span>\r\n                  ) : active.status == 1 ? (\r\n                    <span className=\"text-danger\">Verified</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {active.status == 0 ? \"Check Later\" : active.activation}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : null}\r\n      <div className=\"card-header\">\r\n        <p className=\"h6 text-primary text-center\">\r\n          Pay Through Paypal To{\" \"}\r\n          <em className=\"btn-link\">contact.techsystems@gmail.com</em> and enter\r\n          the transaction code below.\r\n        </p>\r\n        <p className=\"text-center\">\r\n          In Case You need help email us at{\" \"}\r\n          <em className=\"btn-link\">contact.techsystems@gmail.com</em> or\r\n          whatsapp <em className=\"btn-link\">+254 703535116</em>\r\n        </p>\r\n      </div>\r\n      <form onSubmit={SaveCode}>\r\n        <div className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <label>Transaction Code:</label>\r\n            <input\r\n              className=\"rounded form-control\"\r\n              placeholder=\"Enter Transaction Code\"\r\n              value={TransactionCode}\r\n              onChange={(e) => setTransactionCode(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <hr />\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Confirm Transaction Code:{\" \"}\r\n              <small className=\"text-danger\">\r\n                {TransactionCode != \"\" && TransactionCode != ConfirmCode\r\n                  ? \"Not Matching\"\r\n                  : \"\"}\r\n              </small>\r\n            </label>\r\n            <input\r\n              className=\"rounded form-control\"\r\n              placeholder=\"Confirm Transaction Code\"\r\n              value={ConfirmCode}\r\n              onChange={(e) => setConfirmCode(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <div className=\"d-flex justify-content-around\">\r\n            {Loading ? (\r\n              <span className=\"spinner-border text-primary\"></span>\r\n            ) : (\r\n              <button\r\n                type={\"submit\"}\r\n                className=\"btn btn-outline-primary rounded\"\r\n              >\r\n                Submit\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManualPay;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ApiUrl } from \"../../Network/Urls\";\r\nimport swal from \"sweetalert\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addSub } from \"../../reducers/SubSlice\";\r\nimport ManualPay from \"./ManualPay\";\r\n\r\nconst Purchase = ({ softwareId, amount, from }) => {\r\n  useEffect(() => {\r\n    // LoadScript(); to be activated after paypal approval\r\n  }, []);\r\n\r\n  const [Loading, setLoading] = useState(false);\r\n  const [Code, setCode] = useState(\"\");\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n\r\n  const navigate = useNavigate();\r\n  //redux dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const CheckTransaction = (orderID) => {\r\n    setLoading(true);\r\n    fetch(`${ApiUrl}/api/orders/capture`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        orderID,\r\n        softwareId,\r\n        amount: parseInt(amount),\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.status != 201) {\r\n          swal({\r\n            title: \"Failed to connect\",\r\n            icon: \"warning\",\r\n            timer: 3000,\r\n          });\r\n          return;\r\n        }\r\n        if (from === \"web\") {\r\n          dispatch(addSub(res.sub));\r\n          navigate(`/${inst.name}`);\r\n        } else {\r\n          setCode(res.sub.code);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        swal({\r\n          title: \"Failed to connect\",\r\n          icon: \"warning\",\r\n          timer: 3000,\r\n        });\r\n      });\r\n  };\r\n  const LoadScript = async () => {\r\n    setLoading(true);\r\n    /*    var PAYPAL_SCRIPT =\r\n      \"https://www.paypal.com/sdk/js?client-id=AZYfGer7D4VDMYYLX9XMDgZZ1iPjNhwe1PBY70ReUHQrmbSYpzlNaqxRUFDnX6CrsWYYNnHY9jBxfMuq&currency=USD\";*/\r\n    var PAYPAL_SCRIPT =\r\n      \"https://www.paypal.com/sdk/js?client-id=AeKZKUMcGGD_-DUp2ZA6USledptiabWHRDYWJtkFioLn8CPHnuZHQUIFShICt2t4LjW3V27UNteDDf4B&currency=USD\";\r\n    var script = await document.createElement(\"script\");\r\n    await script.setAttribute(\"src\", PAYPAL_SCRIPT);\r\n    await document.head.appendChild(script);\r\n    script.onload = () => RenderButtons();\r\n  };\r\n\r\n  const RenderButtons = () => {\r\n    setLoading(false);\r\n    window.paypal\r\n      .Buttons({\r\n        createOrder: (data, actions) => {\r\n          return actions.order.create({\r\n            purchase_units: [\r\n              {\r\n                amount: {\r\n                  currency_code: \"USD\",\r\n                  value: amount,\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        },\r\n        onApprove: (data, actions) => {\r\n          return actions.order.capture().then((details) => {\r\n            if (details.status === \"COMPLETED\") {\r\n              CheckTransaction(details.id);\r\n            } else {\r\n              swal({\r\n                title: \"Transaction Failed\",\r\n                icon: \"warning\",\r\n                text: \"Try again\",\r\n                timer: 5000,\r\n              });\r\n            }\r\n          });\r\n        },\r\n      })\r\n      .render(\"#paypal-buttons-container\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {Loading ? (\r\n        <p\r\n          className=\"text-center\"\r\n          onClick={() => {\r\n            //  CheckTransaction(`test-${Date.now()}`);\r\n          }}\r\n        >\r\n          <span className=\"spinner-border text-primary\"></span>{\" \"}\r\n        </p>\r\n      ) : Code !== \"\" && from === \"software\" ? (\r\n        <p className=\"text-center\">\r\n          Activation Code is <strong>{Code}</strong>\r\n        </p>\r\n      ) : null}\r\n      <div id=\"paypal-buttons-container\"></div>\r\n      <ManualPay softwareId={softwareId}></ManualPay>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Purchase;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ArrowBarLeft } from \"react-bootstrap-icons\";\r\nimport Purchase from \"./Purchase\";\r\n\r\nconst WebPay = () => {\r\n  const Navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  const subs = useSelector((state) => state.sub.subs);\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <div\r\n        className=\" row d-flex justify-content-center\"\r\n        style={{ marginTop: \"40px\" }}\r\n      >\r\n        <div className=\"col-md-6 d-flex justify-content-around\">\r\n          <h6 className=\"text-center\">\r\n            Get {inst.name}{\" \"}\r\n            {subs.length > 0\r\n              ? \"Maintenance And Update Code At 29$ only\"\r\n              : \"Activation Code at 99$ only\"}\r\n          </h6>\r\n        </div>\r\n      </div>\r\n      <div className=\"row d-flex justify-content-center\">\r\n        <div className=\"col-md-6 justify-content-center\">\r\n          {subs.length > 0 ? (\r\n            <Purchase\r\n              softwareId={inst.clientId}\r\n              amount={\"29.0\"}\r\n              from=\"web\"\r\n            ></Purchase>\r\n          ) : (\r\n            <Purchase\r\n              softwareId={inst.clientId}\r\n              amount={\"99.0\"}\r\n              from=\"web\"\r\n            ></Purchase>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\" row d-flex justify-content-center\">\r\n        <div className=\"col-md-6 d-flex justify-content-around\">\r\n          <button\r\n            className=\"btn btn-sm btn-outline-secondary\"\r\n            onClick={() => Navigate(-1)}\r\n          >\r\n            <ArrowBarLeft></ArrowBarLeft> Go Back\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebPay;\r\n"],"names":["addLiveActive","active","softwareId","token","dispatch","fetch","concat","ApiUrl","method","headers","authorization","body","JSON","stringify","_objectSpread","then","res","json","status","updateActive","swal","title","text","icon","timer","catch","FetchLiveActives","online","fetchActives","actives","_ref","useDispatch","_useState","useState","_useState2","_slicedToArray","TransactionCode","setTransactionCode","_useState3","_useState4","ConfirmCode","setConfirmCode","_useState5","_useState6","Loading","setLoading","Actives","useSelector","state","useEffect","UploadCode","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","transaction","stop","apply","arguments","_jsxs","className","children","length","_jsx","map","deleted","activation","linker","onSubmit","e","preventDefault","buttons","willReturn","err","console","log","placeholder","value","onChange","target","required","type","from","amount","Code","inst","activeInst","useNavigate","onClick","id","ManualPay","Navigate","subs","sub","style","marginTop","name","Purchase","clientId","ArrowBarLeft"],"sourceRoot":""}